// TSP Game - The Route Challenge
// Main JavaScript implementation

// Global variables
let globe;
let selectedCountries = [];
let totalDistance = 0;
let energyUnits = 0;
let isAutoRotating = true;
let arcsData = [];

// Country nodes data - predefined locations
const countryNodes = [
    { name: "United States", lat: 37.0902, lng: -95.7129, color: "#47ba04" },
    { name: "Brazil", lat: -14.2350, lng: -51.9253, color: "#47ba04" },
    { name: "United Kingdom", lat: 55.3781, lng: -3.4360, color: "#47ba04" },
    { name: "Germany", lat: 51.1657, lng: 10.4515, color: "#47ba04" },
    { name: "South Africa", lat: -30.5595, lng: 22.9375, color: "#47ba04" },
    { name: "Egypt", lat: 26.8206, lng: 30.8025, color: "#47ba04" },
    { name: "Russia", lat: 61.5240, lng: 105.3188, color: "#47ba04" },
    { name: "India", lat: 20.5937, lng: 78.9629, color: "#47ba04" },
    { name: "China", lat: 35.8617, lng: 104.1954, color: "#47ba04" },
    { name: "Japan", lat: 36.2048, lng: 138.2529, color: "#47ba04" },
    { name: "Australia", lat: -25.2744, lng: 133.7751, color: "#47ba04" },
    { name: "Indonesia", lat: -0.7893, lng: 113.9213, color: "#47ba04" },
    { name: "Saudi Arabia", lat: 23.8859, lng: 45.0792, color: "#47ba04" },
    { name: "Canada", lat: 56.1304, lng: -106.3468, color: "#47ba04" },
    { name: "Mexico", lat: 23.6345, lng: -102.5528, color: "#47ba04" }
];

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    initGlobe();
    setupEventListeners();
    updateUI();
});

// Initialize the 3D globe
function initGlobe() {
    // Initialize the globe
    globe = Globe()
        .globeImageUrl('https://unpkg.com/three-globe/example/img/earth-blue-marble.jpg')
        .bumpImageUrl('https://unpkg.com/three-globe/example/img/earth-topology.png')
        .backgroundImageUrl('https://unpkg.com/three-globe/example/img/night-sky.png')
        .pointsData(countryNodes)
        .pointColor('color')
        .pointAltitude(0.01)
        .pointRadius(0.25)
        .pointsMerge(true)
        .arcsData(arcsData)
        .arcColor(() => '#00f3ff')
        .arcDashLength(0.4)
        .arcDashGap(0.2)
        .arcDashAnimateTime(1500)
        .arcStroke(0.5)
        .arcAltitude(0.2)
        .onPointClick(handlePointClick)
        .onPointHover(handlePointHover)
        (document.getElementById('globe-container'));

    // Set initial camera position
    globe.controls().autoRotate = isAutoRotating;
    globe.controls().autoRotateSpeed = 0.5;
    
    // Adjust globe size
    const globeContainer = document.getElementById('globe-container');
    globe
        .width(globeContainer.offsetWidth)
        .height(globeContainer.offsetHeight);
        
    // Handle window resize
    window.addEventListener('resize', () => {
        globe
            .width(globeContainer.offsetWidth)
            .height(globeContainer.offsetHeight);
    });
}

// Handle point click event
function handlePointClick(point) {
    // If this is the first point or if the point is not already selected
    if (selectedCountries.length === 0 || !selectedCountries.some(c => c.name === point.name)) {
        selectedCountries.push(point);
        
        // If we have more than one point, create an arc between the last two points
        if (selectedCountries.length > 1) {
            const startPoint = selectedCountries[selectedCountries.length - 2];
            const endPoint = selectedCountries[selectedCountries.length - 1];
            
            // Calculate distance between points
            const distance = calculateDistance(startPoint, endPoint);
            totalDistance += distance;
            
            // Calculate energy units (simplified as distance / 100)
            const energy = Math.round(distance / 100);
            energyUnits += energy;
            
            // Add arc data
            arcsData.push({
                startLat: startPoint.lat,
                startLng: startPoint.lng,
                endLat: endPoint.lat,
                endLng: endPoint.lng,
                color: '#00f3ff'
            });
            
            // Update the globe with new arcs
            globe.arcsData(arcsData);
        }
        
        // Update UI
        updateUI();
    }
}

// Handle point hover event
function handlePointHover(point) {
    if (point) {
        // Show tooltip with country name
        const tooltip = document.createElement('div');
        tooltip.className = 'tooltip';
        tooltip.textContent = point.name;
        tooltip.style.position = 'absolute';
        tooltip.style.top = (event.clientY + 10) + 'px';
        tooltip.style.left = (event.clientX + 10) + 'px';
        tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        tooltip.style.color = '#00f3ff';
        tooltip.style.padding = '5px 10px';
        tooltip.style.borderRadius = '3px';
        tooltip.style.pointerEvents = 'none';
        tooltip.style.zIndex = '1000';
        
        // Remove any existing tooltips
        const existingTooltip = document.querySelector('.tooltip');
        if (existingTooltip) {
            existingTooltip.remove();
        }
        
        document.body.appendChild(tooltip);
    } else {
        // Remove tooltip when not hovering
        const tooltip = document.querySelector('.tooltip');
        if (tooltip) {
            tooltip.remove();
        }
    }
}

// Calculate distance between two points on Earth (using Haversine formula)
function calculateDistance(point1, point2) {
    const R = 6371; // Earth's radius in km
    const dLat = (point2.lat - point1.lat) * Math.PI / 180;
    const dLng = (point2.lng - point1.lng) * Math.PI / 180;
    
    const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * 
        Math.sin(dLng/2) * Math.sin(dLng/2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = R * c;
    
    return Math.round(distance);
}

// Update UI elements
function updateUI() {
    document.getElementById('path-sequence').textContent = selectedCountries.length > 0 ? 
        selectedCountries.map((_, index) => index).join(' â†’ ') : '0';
    document.getElementById('total-distance').textContent = `${totalDistance} km`;
    document.getElementById('energy-units').textContent = `${energyUnits} units`;
    document.getElementById('countries-visited').textContent = selectedCountries.length;
}

// Setup event listeners for buttons
function setupEventListeners() {
    // Auto rotate button
    document.getElementById('auto-rotate').addEventListener('click', () => {
        isAutoRotating = !isAutoRotating;
        globe.controls().autoRotate = isAutoRotating;
        document.getElementById('auto-rotate').textContent = isAutoRotating ? 'AUTO ROTATE' : 'AUTO ROTATE';
    });
    
    // Reset button
    document.getElementById('reset').addEventListener('click', () => {
        selectedCountries = [];
        totalDistance = 0;
        energyUnits = 0;
        arcsData = [];
        globe.arcsData(arcsData);
        updateUI();
    });
    
    // Optimize button (simplified TSP solution using nearest neighbor)
    document.getElementById('optimize').addEventListener('click', () => {
        optimizeRoute();
    });
    
    // Complete route button
    document.getElementById('complete-route').addEventListener('click', () => {
        validateAndCompleteRoute();
    });
    
    // Design thinking button
    document.getElementById('design-thinking').addEventListener('click', () => {
        showDesignThinking();
    });
    
    // Modal close button
    document.querySelector('.close').addEventListener('click', () => {
        document.getElementById('result-modal').style.display = 'none';
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', (event) => {
        const modal = document.getElementById('result-modal');
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// Optimize route using nearest neighbor algorithm
function optimizeRoute() {
    if (countryNodes.length === 0) return;
    
    // Reset current selections
    selectedCountries = [];
    totalDistance = 0;
    energyUnits = 0;
    arcsData = [];
    
    // Start with the first country
    let current = countryNodes[0];
    selectedCountries.push(current);
    
    // Create a copy of unvisited nodes
    let unvisited = [...countryNodes];
    unvisited.splice(0, 1); // Remove the starting node
    
    // Find nearest neighbor for each step
    while (unvisited.length > 0) {
        let nearestIndex = 0;
        let minDistance = Infinity;
        
        // Find the nearest unvisited node
        for (let i = 0; i < unvisited.length; i++) {
            const distance = calculateDistance(current, unvisited[i]);
            if (distance < minDistance) {
                minDistance = distance;
                nearestIndex = i;
            }
        }
        
        // Move to the nearest node
        current = unvisited[nearestIndex];
        selectedCountries.push(current);
        
        // Add arc
        if (selectedCountries.length > 1) {
            const startPoint = selectedCountries[selectedCountries.length - 2];
            const endPoint = selectedCountries[selectedCountries.length - 1];
            
            // Calculate distance and energy
            const distance = calculateDistance(startPoint, endPoint);
            totalDistance += distance;
            energyUnits += Math.round(distance / 100);
            
            // Add arc data
            arcsData.push({
                startLat: startPoint.lat,
                startLng: startPoint.lng,
                endLat: endPoint.lat,
                endLng: endPoint.lng,
                color: '#00f3ff'
            });
        }
        
        // Remove the visited node
        unvisited.splice(nearestIndex, 1);
    }
    
    // Complete the loop back to the start
    const startPoint = selectedCountries[selectedCountries.length - 1];
    const endPoint = selectedCountries[0];
    
    // Calculate final leg distance and energy
    const distance = calculateDistance(startPoint, endPoint);
    totalDistance += distance;
    energyUnits += Math.round(distance / 100);
    
    // Add final arc data
    arcsData.push({
        startLat: startPoint.lat,
        startLng: startPoint.lng,
        endLat: endPoint.lat,
        endLng: endPoint.lng,
        color: '#00f3ff'
    });
    
    // Update globe and UI
    globe.arcsData(arcsData);
    updateUI();
}

// Validate and complete the route
function validateAndCompleteRoute() {
    // Check if all nodes are visited
    if (selectedCountries.length < countryNodes.length) {
        showResult("Incomplete Route", "You need to visit all countries before completing the route.");
        return;
    }
    
    // Check if route returns to start
    if (selectedCountries.length > 1) {
        // Add the final leg back to the start
        const startPoint = selectedCountries[selectedCountries.length - 1];
        const endPoint = selectedCountries[0];
        
        // Calculate final leg distance and energy
        const distance = calculateDistance(startPoint, endPoint);
        totalDistance += distance;
        energyUnits += Math.round(distance / 100);
        
        // Add final arc data
        arcsData.push({
            startLat: startPoint.lat,
            startLng: startPoint.lng,
            endLat: endPoint.lat,
            endLng: endPoint.lng,
            color: '#00f3ff'
        });
        
        // Update globe and UI
        globe.arcsData(arcsData);
        updateUI();
        
        // Show results
        showResult("Route Complete!", `
            <p>You have successfully visited all ${countryNodes.length} countries!</p>
            <p>Total Distance: ${totalDistance} km</p>
            <p>Energy Units Used: ${energyUnits}</p>
            <p>Your route efficiency: ${calculateEfficiency()}%</p>
        `);
    }
}

// Calculate route efficiency (compared to optimal solution)
function calculateEfficiency() {
    // This is a simplified calculation - in a real app, you'd compare to a known optimal solution
    // Here we'll just use a theoretical minimum as a benchmark
    const theoreticalMinimum = 35000; // Example value
    const efficiency = Math.max(0, Math.min(100, Math.round((theoreticalMinimum / totalDistance) * 100)));
    return efficiency;
}

// Show result in modal
function showResult(title, content) {
    const modal = document.getElementById('result-modal');
    const resultContent = document.getElementById('result-content');
    
    // Set modal content
    document.querySelector('.modal-content h2').textContent = title;
    resultContent.innerHTML = content;
    
    // Show modal
    modal.style.display = 'block';
}

// Show design thinking information
function showDesignThinking() {
    showResult("Design Thinking", `
        <h3>About the Traveling Salesman Problem</h3>
        <p>The Traveling Salesman Problem (TSP) is a classic algorithmic problem in computer science:</p>
        <p>"Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?"</p>
        
        <h3>Game Implementation</h3>
        <p>This game visualizes the TSP on a 3D globe, allowing players to:</p>
        <ul>
            <li>Manually create routes by selecting countries</li>
            <li>See the distance and energy cost of their route</li>
            <li>Try to find the optimal solution</li>
            <li>Use the "Optimize" feature to see a computer-generated solution</li>
        </ul>
        
        <h3>Algorithms</h3>
        <p>The "Optimize" button uses a nearest neighbor algorithm, which is a greedy approach to solving TSP. While not guaranteed to find the optimal solution, it's computationally efficient and produces reasonably good routes.</p>
    `);
}
